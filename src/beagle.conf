<?xml version="1.0" encoding="ISO-8859-1"?>
<Beagle version="3.0.3">
  <!--Evolver: configuration of the algorithm-->
  <Evolver>
    <BootStrapSet>
      <InitRecipeOp/>
      <TermMaxGenOp/>
      <MilestoneWriteOp/>
    </BootStrapSet>
    <MainLoopSet>
      <RecipeMutationOp/> <!-- TODO leave the best individual untouched, do use it to breed though -->
      <RecipeCrossoverOp/>
      <RecipeEvalOp/>
      <SelectTournamentOp/>  <!-- Randomly selects ec.sel.tournsize individuals and clones the best of those -->
      <StatsCalcFitnessSimpleOp/>
      <TermMaxGenOp/>
      <MilestoneWriteOp/>
    </MainLoopSet>
  </Evolver>
  <!--System: setting of the evolution-->
  <System>
    <Logger/>
    <Register>
      <Entry key="ms.write.prefix">population</Entry>
      <Entry key="ms.write.compress">0</Entry>

      <!-- Maximum number of generations for the evolution. -->
      <Entry key="ec.term.maxgen">100</Entry>

      <!--ec.pop.size [UIntArray]: Number of demes and size of each deme of the population. The format of an UIntArray is S1,S2,...,Sn, where Si is the ith value. The size of the UIntArray is the number of demes present in the vivarium, while each value of the vector is the size of the corresponding deme.-->
      <Entry key="ec.pop.size">50</Entry>

      <!--ec.cx.prob [Float]: Single individual crossover probability for a generation.-->
      <Entry key="ec.cx.prob">0.5</Entry>

      <!--ec.mut.prob [Float]: Mutation probability for a single individual.-->
      <Entry key="ec.mut.prob">0.1</Entry>

      <!--ec.hof.demesize [UInt]: Number of individuals kept in each deme's hall-of-fame (best individuals so far). Note that a hall-of-fame contains only copies of the best individuals so far and is not used by the evolution process.-->
      <Entry key="ec.hof.demesize">0</Entry>

      <!--ec.hof.vivasize [UInt]: Number of individuals kept in vivarium's hall-of-fame (best individuals so far). Note that a hall-of-fame contains only copies of the best individuals so far and is not used by the evolution process.-->
      <Entry key="ec.hof.vivasize">10</Entry>

      <!--ec.sel.tournsize [UInt]: Number of participants for tournament selection.-->
      <Entry key="ec.sel.tournsize">2</Entry>

      <!--ec.rand.seed [ULong]: Randomizer seed. A zero value means that the seed will be initialized using the /dev/urandom device.-->
      <Entry key="ec.rand.seed">0</Entry>

      <!--lg.console.level [UInt]: Log level used for console output generation. Log levels available are: (0) no log, (1) basic logs, (2) stats, (3) general informations, (4) details on operations, (5) trace of the algorithms, (6) verbose, (7) debug (enabled only in full debug mode).-->
      <Entry key="lg.console.level">0</Entry>

      <!--lg.file.level [UInt]: Log level used for file output generation. Log levels available are: (0) no log, (1) basic logs, (2) stats, (3) general informations, (4) details on operations, (5) trace of the algorithms, (6) verbose, (7) debug (enabled only in full debug mode).-->
      <Entry key="lg.file.level">4</Entry>

      <!--lg.file.name [String]: Filename in which messages are outputed. An empty string file name means no output is done to a file.-->
      <Entry key="lg.file.name">beagle.log</Entry>

      <!--lg.show.class [Bool]: Flag whether class name is outputed in the logs.-->
      <Entry key="lg.show.class">0</Entry>

      <!--lg.show.level [Bool]: Flag whether logging level in outputed in the logs.-->
      <Entry key="lg.show.level">0</Entry>

      <!--lg.show.type [Bool]: Flag whether message type is outputed in the logs.-->
      <Entry key="lg.show.type">0</Entry>
    </Register>
  </System>
</Beagle>
